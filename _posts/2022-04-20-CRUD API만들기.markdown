---
# multilingual page pair id, this must pair with translations of this page. (This name must be unique)
lng_pair: id_Examples
title: "[스프링]CRUD API만들기"

# post specific
# if not specified, .name will be used from _data/owner.yml
author: Mr. Green's Workshop
# multiple category is not supported
category: 스프링
# multiple tag entries are possible
tags: [API]
# thumbnail image for post
img: ":crudblog.png"
# disable comments on this page
#comments_disable: true

# publish date
date: 2022-04-20 09:11:06 +0900

# seo
# if not specified, date will be used.
#meta_modify_date: 2022-02-10 08:11:06 +0900
# check the meta_common_description in _data/lang/[language].yml
#meta_description: ""

# optional
# if you enabled image_viewer_posts you don't need to enable this. This is only if image_viewer_posts = false
#image_viewer_on: true
# if you enabled image_lazy_loader_posts you don't need to enable this. This is only if image_lazy_loader_posts = false
#image_lazy_loader_on: true
# exclude from on site search
#on_site_search_exclude: true
# exclude from search engines
#search_engine_exclude: true
# to disable this page, simply set published: false or delete this file
#published: false
---

<!-- outline-start -->

<!-- outline-end -->
# CRUD   
CRUD란 Create, Read, Update, Delete의 약자로   
모든 프로그래밍은 이것을 기본 형식으로 하며 API작성도 이를 기본형태로 깔고 한다   
간단한 게시판을 만들기위해 각 역할에 해당하는 클래스를 작성한다   

# 도메인 클래스 작성   
프로젝트 초기작업을 끝낸후 SpringApplication클래스와 같은 위치에   
domain패키지를 만들고 Board클래스를 만든다   
lombok라이브러리 포함된 @Data를 활용했다   
```
@Data
public class Board {

    private int boardSeq;
    private String title;
    private String contents;
    private Date regDate;
    
}
```
여기서 boardSeq는 DB에서 PK(Primary Key)로 사용한다   

# 저장소 클래스 작성   
repository패키지를 만들고 BoardRepository클래스(인터페이스)를 만든다   
@Repository 애너테이션을 붙여서 스프링 컨테이너에 등록한다   
```
@Repository
public interface BoardRepository {

    List<Board> getList();
    Board get(int boardSeq);
    void save(Board board);    
    void update(Board board);
    void delete(int boardSeq);
}
```
# 서비스 클래스 작성   
service패키지를 만들고 BoardService클래스를 만든다   
@Service 애너테이션을 붙여서 스프링 컨테이너에 등록한다   
필드로 BoardRepository를 만들고 생성자에 @AutoWired를 붙여 연결해준다   
여기서 save메서드는 신규 작성, 수정 두가지 기능을 수행한다   
```
@Service
public class BoardService {
    private BoardRepository boardRepository;

    @Autowired
    public BoardService(BoardRepository boardRepository) {
        this.boardRepository = boardRepository;
    }

    public List<Board> getList() {
        return boardRepository.getList();
    }

    public Board get(int boardSeq) {
        return boardRepository.get(boardSeq);
    }

    public int save(Board board) {
        Board board = boardRepository.get(parameter.getBoardSeq());
        if (board == null) {
            boardRepository.save(parameter);
        } else {
            boardRepository.update(parameter);
        }
        return parameter.getBoardSeq();
    }    

    public void update(BoardParameter board) {
        boardRepository.update(board);
    }

    public void delete(int boardSeq) {
        boardRepository.delete(boardSeq);
    }

}
```

# 컨트롤러 클래스 작성   
controller패키지를 만들고 BoardController클래스를 만든다   
@Controller 애너테이션을 붙여서 스프링 컨테이너에 등록한다   
```
@RestController
@RequestMapping("/board")
@Api(tags = "게시판 API")
public class BoardController {
    private BoardService boardService;
    Logger logger = LoggerFactory.getLogger(getClass());

    @Autowired
    public BoardController(BoardService boardService) {
        this.boardService = boardService;
    }

    @GetMapping
    @ApiOperation(value = "목록 조회", notes = "목록정보를 조회")
    public BaseResponse<List<Board>> getList(@ApiParam BoardSearchParameter parameter, @ApiParam MySQLPageRequest pageRequest) {
        logger.info("pageRequest : {}", pageRequest);
        PageRequestParameter<BoardSearchParameter> pageRequestParameter = new PageRequestParameter<>(pageRequest, parameter);
        return new BaseResponse<List<Board>>(boardService.getList(pageRequestParameter));
    }

    @GetMapping("/{boardSeq}")
    @ApiOperation(value = "상세 조회", notes = "게시물 번호에 해당하는 정보를 조회")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "boardSeq", value = "게시물 번호", example = "1")
    })
    public BaseResponse<Board> get(@PathVariable int boardSeq) {
        Board board = boardService.get(boardSeq);

        if (board == null) {
            throw new BaseException(BaseResponseCode.DATA_IS_NULL, new String[]{"게시물"});
        }
        return new BaseResponse<Board>(boardService.get(boardSeq));
    }

    //    @GetMapping("/save")
    @PutMapping
    @RequestConfig(loginCheck = false)
    @ApiOperation(value = "등록 / 수정 처리", notes = "신규 게시물 작성, 기존 게시물 수정")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "boardSeq", value = "게시물 번호", example = "1"),
            @ApiImplicitParam(name = "title", value = "제목", example = "스프링"),
            @ApiImplicitParam(name = "contents", value = "내용", example = "스프링 강좌")
    })
    public BaseResponse<Integer> save(BoardParameter parameter) {
        // 제목, 내용 필수입력 체크
        if (StringUtils.isEmpty(parameter.getTitle())) {
            throw new BaseException(BaseResponseCode.VALIDATE_REQUIRED, new String[]{"title", "제목"});
        }
//        if (parameter.getContents() == null) {
//            throw new BaseException(BaseResponseCode.VALIDATE_REQUIRED, new String[]{"contents", "내용"});
//        }
        if (StringUtils.isEmpty(parameter.getContents())) {
            throw new BaseException(BaseResponseCode.VALIDATE_REQUIRED, new String[]{"contents", "내용"});
        }
        boardService.save(parameter);
        return new BaseResponse<Integer>(parameter.getBoardSeq());
    }

    @ApiOperation(value = "대용량 등록처리1", notes = "대용량 등록처리1")
    @PutMapping("/saveList1")
    public BaseResponse<Boolean> saveList1() {
        int count = 0;
        List<BoardParameter> list = new ArrayList<>();
        while (true) {
            count++;
            String title = RandomStringUtils.randomAlphabetic(10);
            String contents = RandomStringUtils.randomAlphabetic(10);
            list.add(new BoardParameter(BoardType.INQUIRY, title, contents));
            if (count >= 10000) {
                break;
            }
        }
        long start = System.currentTimeMillis();
        boardService.saveList1(list);
        long end = System.currentTimeMillis();

        logger.info("실행 시간 : {}", (end - start) / 1000.0);
        return new BaseResponse<Boolean>(true);
    }

    @ApiOperation(value = "대용량 등록처리2", notes = "대용량 등록처리2")
    @PutMapping("/saveList2")
    public BaseResponse<Boolean> saveList2() {
        int count = 0;
        List<BoardParameter> list = new ArrayList<>();
        while (true) {
            count++;
            String title = RandomStringUtils.randomAlphabetic(10);
            String contents = RandomStringUtils.randomAlphabetic(10);
            list.add(new BoardParameter(BoardType.INQUIRY, title, contents));
            if (count >= 10000) {
                break;
            }
        }
        long start = System.currentTimeMillis();
        boardService.saveList2(list);
        long end = System.currentTimeMillis();

        logger.info("실행 시간 : {}", (end - start) / 1000.0);
        return new BaseResponse<Boolean>(true);
    }

    @DeleteMapping("/{boardSeq}")
    @RequestConfig
    @ApiOperation(value = "삭제 처리", notes = "게시물 번호에 해당하는 정보를 삭제")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "boardSeq", value = "게시물 번호", example = "1")
    })
    public BaseResponse<Boolean> delete(@PathVariable int boardSeq) {
        Board board = boardService.get(boardSeq);
        if (board == null) {
            return new BaseResponse<Boolean>(false);
        }
        boardService.delete(boardSeq);
        return new BaseResponse<Boolean>(true);
    }

}
```
# DB로 쿼리를 날릴 xml파일 작성   
resources안에 mybatis폴더를 만들고 sql폴더를 만들고 그 안에   
Board.xml파일을 만들고 DB로 날릴 쿼리를 작성한다   
컬럼과 컬럼사이에 ,가 안빠지도록 주의한다.. 하나라도 빠지면 예외가 발생하기 때문이다   
개발도중의 것을 그대로 올린것이다   
```
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="lsj.lsjspring.repository.BoardRepository">
    
    <resultMap type="lsj.lsjspring.domain.Board" id="getListResultMap">
        <result column="DEL_YN" property="delYn" typeHandler="lsj.lsjspring.config.mybatis.typehandler.StringValueBooleanTypeHandler"/>
    </resultMap>

    <select id="getList" parameterType="lsj.lsjspring.framework.data.domain.PageRequestParameter" resultMap="getListResultMap">
        SELECT
            B.BOARD_SEQ,
            B.BOARD_TYPE,
            B.TITLE,
            B.CONTENTS,
            B.REG_DATE,
            B.DEL_YN
        FROM T_BOARD B
        <where>
            <if test="@org.apache.commons.lang3.StringUtils@isNotEmpty(parameter.keyword)">
                AND B.TITLE LIKE CONCAT('%', #{keyword}, '%')
            </if>
            <if test="@org.apache.commons.lang3.ObjectUtils@isNotEmpty(parameter.boardTypes)">
                AND B.BOARD_TYPE IN (
                    <foreach collection="parameter.boardTypes" item="value" separator=", ">
                        #{value}
                    </foreach>
                )
            </if>
        </where>
        ORDER BY B.REG_DATE DESC
        LIMIT #{pageRequest.limit}, #{pageRequest.offset}
    </select>


    <select id="get" parameterType="int" resultType="lsj.lsjspring.domain.Board">
        SELECT
            B.BOARD_SEQ,
            B.BOARD_TYPE,
            B.TITLE,
            B.CONTENTS,
            B.REG_DATE,
            B.DEL_YN
        FROM T_BOARD B
        WHERE B.BOARD_SEQ = #{boardSeq}
        ORDER BY B.REG_DATE DESC
    </select>

    <insert id="save" parameterType="lsj.lsjspring.parameter.BoardParameter" useGeneratedKeys="true" keyProperty="boardSeq">
        INSERT INTO T_BOARD
        (
            BOARD_TYPE,
            TITLE,
            CONTENTS,
            REG_DATE,
            DEL_YN
        )
        VALUES
        (
            #{boardType.code},
            #{title},
            #{contents},
            NOW(),
            #{delYn,typeHandler=lsj.lsjspring.config.mybatis.typehandler.StringValueBooleanTypeHandler}
        )
    </insert>

    <insert id="saveList" parameterType="map">
        INSERT INTO T_BOARD
        (
            BOARD_TYPE,
            TITLE,
            CONTENTS,
            REG_DATE
        )
        VALUES
        <foreach collection="boardList" item="board" separator=", ">
            (
                #{board.boardType.code},
                #{board.title},
                #{board.contents},
                NOW()
            )
        </foreach>
    </insert>
    <update id="update" parameterType="lsj.lsjspring.parameter.BoardParameter">
        UPDATE T_BOARD
        SET
            BOARD_TYPE = #{boardType},
            TITLE = #{title},
            CONTENTS = #{contents},
            DEL_YN = #{delYn,typeHandler=lsj.lsjspring.config.mybatis.typehandler.StringValueBooleanTypeHandler}
        WHERE BOARD_SEQ = #{boardSeq}
    </update>

    <delete id="delete" parameterType="int">
        DELETE FROM T_BOARD
        WHERE BOARD_SEQ = #{boardSeq}
    </delete>

</mapper>
```

# 작성한 xml파일을 DB와 연결, Bean으로 등록
configuration패키지에 MybatisConfiguration클래스를 만들고   
경로를 설정해서 연결해준다   
```
@Configuration
@MapperScan(basePackages = "lsj.lsjspring.repository")
public class MybatisConfiguration {

    @Bean
    public SqlSessionFactory sqlSessionFactory(@Autowired DataSource dataSource, ApplicationContext applicationContext) throws Exception {
        SqlSessionFactoryBean factoryBean = new SqlSessionFactoryBean();
        factoryBean.setDataSource(dataSource);
        factoryBean.setMapperLocations(applicationContext.getResources("classpath:mybatis/sql/*.xml"));
        SqlSessionFactory factory = factoryBean.getObject();
        factory.getConfiguration().setMapUnderscoreToCamelCase(true);
        return factoryBean.getObject();
    }

    @Bean
    public SqlSessionTemplate sqlSessionTemplate(@Autowired SqlSessionFactory sqlSessionFactory) {
        return new SqlSessionTemplate(sqlSessionFactory);
    }
}
```
