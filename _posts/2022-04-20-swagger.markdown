---
# multilingual page pair id, this must pair with translations of this page. (This name must be unique)
lng_pair: id_Examples
title: "[스프링]Swagger"

# post specific
# if not specified, .name will be used from _data/owner.yml
author: Mr. Green's Workshop
# multiple category is not supported
category: 스프링
# multiple tag entries are possible
tags: [framework]
# thumbnail image for post
img: ":swagger.png"
# disable comments on this page
#comments_disable: true

# publish date
date: 2022-04-20 09:30:06 +0900

# seo
# if not specified, date will be used.
#meta_modify_date: 2022-02-10 08:11:06 +0900
# check the meta_common_description in _data/lang/[language].yml
#meta_description: ""

# optional
# if you enabled image_viewer_posts you don't need to enable this. This is only if image_viewer_posts = false
#image_viewer_on: true
# if you enabled image_lazy_loader_posts you don't need to enable this. This is only if image_lazy_loader_posts = false
#image_lazy_loader_on: true
# exclude from on site search
#on_site_search_exclude: true
# exclude from search engines
#search_engine_exclude: true
# to disable this page, simply set published: false or delete this file
#published: false
---

<!-- outline-start -->

<!-- outline-end -->
# swagger란?
처음 개발하거나 혹은 유지보수를 진행할 때   
API 서버가 어떤 Spec을 가진 데이터를 주고받는지에 대한 문서작업이 꼭 필요하다      
하지만 이런 문서작업은 굉장히 시간이 많이들고 API가 수정될 때마다   
문서도 같이 수정해줘야 하는 번거로움을 동반한다      
Swagger는 Open Api Specification(OAS)를 위한 프레임워크로   
API들이 가지고 있는 스펙(spec)을 명세, 관리할 수 있는 프로젝트이다   
<br/>
# 의존성 주입 (Dependancy Injection)
implementation group: 'io.springfox', name: 'springfox-swagger-ui', version: '2.9.2'   
implementation group: 'io.springfox', name: 'springfox-swagger2', version: '2.9.2'   <br/>

# SwaggerConfig bean 등록   
```
@Configuration
@EnableSwagger2
public class SwaggerConfiguration {

    @Bean
    public Docket docket(){
        ApiInfoBuilder apiInfo = new ApiInfoBuilder();
        apiInfo.title("API 서버 문서");
        apiInfo.description("API 서버 문서입니다");

        Docket docket = new Docket(DocumentationType.SWAGGER_2);
        docket.apiInfo(apiInfo.build());

        ApiSelectorBuilder apis = docket.select().apis(RequestHandlerSelectors.basePackage("lsj.lsjspring.controller"));
        apis.paths(PathSelectors.ant("/**"));

        return apis.build();
    }
}
```

# Swagger-ui 접속해서 확인
브라우저에 서버 주소:포트/swagger-ui.html로 접속해서 확인한다      
![swagger](:Swagger UI - localhost.png)

# 컨트롤러에 애너테이션 추가
@Api, @ApiOperation, @ApiImplicitParams, @ApiImplicitParam, @PathVariable같은   
애너테이션들을 추가해 swagger-ui에서의 api설명, 기능을 추가한다   
자세한 코드는 이전 포스트인 CRUD API만들기를 참조   
