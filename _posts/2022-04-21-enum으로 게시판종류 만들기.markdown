---
# multilingual page pair id, this must pair with translations of this page. (This name must be unique)
lng_pair: id_Examples
title: "[스프링]enum으로 게시물 종류 만들기"

# post specific
# if not specified, .name will be used from _data/owner.yml
author: Mr. Green's Workshop
# multiple category is not supported
category: 스프링
# multiple tag entries are possible
tags: [enum]
# thumbnail image for post
img: ":Spring_Framework_logo.png"
# disable comments on this page
#comments_disable: true

# publish date
date: 2022-04-21 10:00:06 +0900

# seo
# if not specified, date will be used.
#meta_modify_date: 2022-02-10 08:11:06 +0900
# check the meta_common_description in _data/lang/[language].yml
#meta_description: ""

# optional
# if you enabled image_viewer_posts you don't need to enable this. This is only if image_viewer_posts = false
#image_viewer_on: true
# if you enabled image_lazy_loader_posts you don't need to enable this. This is only if image_lazy_loader_posts = false
#image_lazy_loader_on: true
# exclude from on site search
#on_site_search_exclude: true
# exclude from search engines
#search_engine_exclude: true
# to disable this page, simply set published: false or delete this file
#published: false
---

<!-- outline-start -->

<!-- outline-end -->

# DB의 테이블에 BOARD_TYPE컬럼추가   
```
ALTER TABLE T_BOARD
CHANGE COLUMN BOARD_SEQ BOARD_SEQ INT(11) NOT NULL AUTO_INCREMENT COMMENT '게시물 번호' FIRST,
ADD COLUMN BOARD_TYPE VARCHAR(10) NOT NULL COMMENT '게시판 종류' AFTER BOARD_SEQ;
```
MySQL에서 게시판으로 쓰고있는 테이블에 컬럼을 추가한다   
<br/>

# BoardType역할을 수행할 클래스 추가
domain패키지에 아래 클래스를 추가한다   
```
public interface BaseCodeLabelEnum {
    String code();
    String label();
}
```
인터페이스를 생성후
```
public enum BoardType implements BaseCodeLabelEnum {

    NOTICE("공지사항"),
    FAQ("자주묻는 질문"),
    INQUIRY("1:1문의");

    private String code;
    private String label;


    BoardType(String label) {
        this.code = name();
        this.label = label;
    }

    @Override
    public String code() {
        return code;
    }

    @Override
    public String label() {
        return label;
    }
}
```
인터페이스를 상속받는 enum클래스를 추가한다   

# domain과 parameter를 수행하는 클래스에 boardType필드추가
```
@Data
public class Board {

    private int boardSeq;
    private BoardType boardType;
    private String title;
    private String contents;
    private Date regDate;
    private boolean delYn;
}
```

# JsonSerializer의 상속을 받는 enum설정클래스를 추가
config패키지에 아래와 같이 클래스를 추가한다      
```
public class BaseCodeLabelEnumJsonSerializer extends JsonSerializer<BaseCodeLabelEnum> {
    @Override
    public void serialize(BaseCodeLabelEnum value, JsonGenerator jsonGenerator, SerializerProvider provider) throws IOException, JsonProcessingException {
        Map<String, Object> map =  new HashMap<>();
        map.put("code", value.code());
        map.put("label", value.label());
        jsonGenerator.writeObject(map);
    }
}
```

# WebConfiguration클래스에 스프링빈으로 등록
```
@Configuration
public class WebConfiguration implements WebMvcConfigurer {
    ...
    @Bean
    public ObjectMapper objectMapper() {
        ObjectMapper objectMapper = new ObjectMapper();
        SimpleModule simpleModule = new SimpleModule();
        simpleModule.addSerializer(BaseCodeLabelEnum.class, new BaseCodeLabelEnumJsonSerializer());
        objectMapper.registerModule(simpleModule);
        return objectMapper;
    }

    @Bean
    public MappingJackson2JsonView mappingJackson2JsonView() {
        MappingJackson2JsonView jsonView = new MappingJackson2JsonView();
        jsonView.setContentType(MediaType.APPLICATION_JSON_VALUE);
        jsonView.setObjectMapper(objectMapper());
        return jsonView;
    }
}
```
그외에 Board.xml에도 BoardType관련 쿼리 내용을 추가한다   

   
   <br/>




