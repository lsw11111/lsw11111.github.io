---
# multilingual page pair id, this must pair with translations of this page. (This name must be unique)
lng_pair: id_Examples
title: "[스프링]페이징 처리"

# post specific
# if not specified, .name will be used from _data/owner.yml
author: Mr. Green's Workshop
# multiple category is not supported
category: 스프링
# multiple tag entries are possible
tags: []
# thumbnail image for post
img: ":Spring_Framework_logo.png"
# disable comments on this page
#comments_disable: true

# publish date
date: 2022-04-21 12:08:06 +0900

# seo
# if not specified, date will be used.
#meta_modify_date: 2022-02-10 08:11:06 +0900
# check the meta_common_description in _data/lang/[language].yml
#meta_description: ""

# optional
# if you enabled image_viewer_posts you don't need to enable this. This is only if image_viewer_posts = false
#image_viewer_on: true
# if you enabled image_lazy_loader_posts you don't need to enable this. This is only if image_lazy_loader_posts = false
#image_lazy_loader_on: true
# exclude from on site search
#on_site_search_exclude: true
# exclude from search engines
#search_engine_exclude: true
# to disable this page, simply set published: false or delete this file
#published: false
---

<!-- outline-start -->

<!-- outline-end -->

# 관련 클래스 추가
framework.data.domain 아래에 아래 클래스 추가   
```
@Data
public class MySQLPageRequest {

    private int page;
    private int size;

    @JsonIgnore
    @ApiModelProperty(hidden = true)
    private int limit;

    @JsonIgnore
    @ApiModelProperty(hidden = true)
    private int offset;

    public MySQLPageRequest(int page, int size,int limit, int offset) {
        this.page = page;
        this.size = size;
        this.limit = limit;
        this.offset = offset;
    }

    // 페이지 요청정보 및 계산된 값
}
```
```
@Data
public class PageRequestParameter<T> {
    private MySQLPageRequest pageRequest;
    private T parameter;

    public PageRequestParameter(MySQLPageRequest pageRequest, T parameter) {
        this.pageRequest = pageRequest;
        this.parameter = parameter;
    }

    // 페이지 요청정보와 매개변수 정보
}
```
<br/>

# Resolver클래스 추가
```
public class MySQLPageRequestHandleMethodArgumentResolver implements HandlerMethodArgumentResolver {

    final Logger logger = LoggerFactory.getLogger(getClass());

    private static final String DEFAULT_PARAMETER_PAGE = "page";
    private static final String DEFAULT_PARAMETER_SIZE = "size";
    private static final int DEFAULT_SIZE = 20;

    @Override
    public boolean supportsParameter(MethodParameter parameter) {
        return MySQLPageRequest.class.isAssignableFrom(parameter.getParameterType());
    }

    @Override
    public Object resolveArgument(MethodParameter parameter, ModelAndViewContainer mavContainer, NativeWebRequest webRequest, WebDataBinderFactory binderFactory) throws Exception {
        HttpServletRequest request = (HttpServletRequest) webRequest.getNativeRequest();
        // 현재 페이지
        int page = NumberUtils.toInt(request.getParameter(DEFAULT_PARAMETER_PAGE), 1);
        // 리스트 갯수
        int offset = NumberUtils.toInt(request.getParameter(DEFAULT_PARAMETER_SIZE), DEFAULT_SIZE);
        // 시작지점
        int limit = (offset * page) - offset;
        logger.info("page : {}", page);
        logger.info("limit : {}, offset : {}", limit, offset);
        return new MySQLPageRequest(page, offset, limit, offset);
    }

    // MySQL 쿼리 페이징 LIMIT, OFFSET 값을 자동계산하여 MysqlPageRequest 클래스 담아서 컨트롤러에서 받을 수 있게함
}
```
# WebConfiguration에서 메서드 Override
```
@Configuration
public class WebConfiguration implements WebMvcConfigurer {
    ...
    @Override
    public void addArgumentResolvers(List<HandlerMethodArgumentResolver> resolvers) {
        // 페이지 리졸버 등록
        resolvers.add(new MySQLPageRequestHandleMethodArgumentResolver());
    }
}
```
# controller, service, repository에서 페이지 요청 매개변수 추가
```
@GetMapping
    @ApiOperation(value = "목록 조회", notes = "목록정보를 조회")
    public BaseResponse<List<Board>> getList(@ApiParam BoardSearchParameter parameter, @ApiParam MySQLPageRequest pageRequest) {
        logger.info("pageRequest : {}", pageRequest);
        PageRequestParameter<BoardSearchParameter> pageRequestParameter = new PageRequestParameter<>(pageRequest, parameter);
        return new BaseResponse<List<Board>>(boardService.getList(pageRequestParameter));
    }
```

# Board.xml 쿼리 내용 추가
```
<select id="getList" parameterType="lsj.lsjspring.framework.data.domain.PageRequestParameter" resultMap="getListResultMap">
        SELECT
            B.BOARD_SEQ,
            B.BOARD_TYPE,
            B.TITLE,
            B.CONTENTS,
            B.REG_DATE,
            B.DEL_YN
        FROM T_BOARD B
        <where>
            <if test="@org.apache.commons.lang3.StringUtils@isNotEmpty(parameter.keyword)">
                AND B.TITLE LIKE CONCAT('%', #{parameter.keyword}, '%')
            </if>            
        </where>
        ORDER BY B.REG_DATE DESC
        LIMIT #{pageRequest.limit}, #{pageRequest.offset}
    </select>
```

# 리스트 조회용 클래스 추가   
```
@Data
public class BoardSearchParameter {

    private String keyword;
    private List<BoardType> boardTypes;

    public BoardSearchParameter() {
    }
}
```
repository, service, controller클래스에서도   
getList메서드의 매개변수로 BoardSearchParameter를 넣어준다   
   
   <br/>




