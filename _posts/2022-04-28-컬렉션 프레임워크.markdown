---
# multilingual page pair id, this must pair with translations of this page. (This name must be unique)
lng_pair: id_Examples
title: "[자바]컬렉션 프레임워크"

# post specific
# if not specified, .name will be used from _data/owner.yml
author: Mr. Green's Workshop
# multiple category is not supported
category: 자바
# multiple tag entries are possible
tags: []
# thumbnail image for post
img: ":자바.png"
# disable comments on this page
#comments_disable: true

# publish date
date: 2022-04-28 08:18:06 +0900

# seo
# if not specified, date will be used.
#meta_modify_date: 2022-02-10 08:11:06 +0900
# check the meta_common_description in _data/lang/[language].yml
#meta_description: ""

# optional
# if you enabled image_viewer_posts you don't need to enable this. This is only if image_viewer_posts = false
#image_viewer_on: true
# if you enabled image_lazy_loader_posts you don't need to enable this. This is only if image_lazy_loader_posts = false
#image_lazy_loader_on: true
# exclude from on site search
#on_site_search_exclude: true
# exclude from search engines
#search_engine_exclude: true
# to disable this page, simply set published: false or delete this file
#published: false
---

<!-- outline-start -->

<!-- outline-end -->

# 컬렉션 프레임워크란
프로그램 구현에 필요한 자료구조를 구현한 라이브러리   
java.util패키지   
개발에 소요되는 시간을 절약하면서 최적화된 알고리즘 사용가능   
<br/>
컬렉션 인터페이스 : 단일객체를 다룸   
List 선형자료구조. 순서가 있음. 중복o   
Set 집합의 개념. 중복x. 정렬할때 사용   

Map : key-value 페어로 이루어진 객체로 이루어짐. 키 중복x   
Hashtable 동기화 지원o 단일쓰레드에서 쓰면 안됨   
- properties 파일을 읽어서 키-값으로 저장하는 기능?   
HashMap 동기화 지원x   
TreeMap   

Iterator 객체들을 순회   

# List
Collection 하위 인터페이스   
객체를 순서에 따라 저장, 관리하는 인터페이스   
배열의 기능을 구현   
ArrayList, Vector, LinkedList가 많이 사용됨   

Vector는 멀티쓰레드 상태에서 리소스에 대한   
동기화가 필요할 경우 사용   
일반적으로는 ArrayList가 더 많이 사용됨   
ArrayList에 동기화기능이 추가되어야 할 경우   
```
Collections.synchronizedList(new ArrayList<String>());
```
동기화 : 2개의 쓰레드가 동시에 하나의 리소스에 접근시   
순서를 맞춰서 데이터에 오류가 발생하지 않도록 함	 
<br/>   

# Set
Set인터페이스   
Collection의 하위 인터페이스   
중복x   
아이디 비번 주민번호 등 유일한 값, 객체를 관리할때   
List는 순서기반, Set은 순서가 없음   
저장순서와 출력순서가 같지않음   
get() 메서드 x   

```
public static void main(String[] args) {
		HashSet<String> set1 = new HashSet<>();
		set1.add("ㅇㅇ");
		set1.add("ㅎㅎ");
		set1.add("ㅋㅋ");
		
		System.out.println(set1);
		
		set1.add("ㅇㅇ");
		System.out.println(set1); // 중복 안됨. 기존의 3개만 출력됨
		
	}
```

# Tree
Binary search tree   
검색,정렬에 주로 사용   
계층 자료구조 - 자식노드의 수가 최대 2개   
왼쪽이 leftChild 오른쪽 rightChild
부모 parentNode   
왼쪽이 가진 값 < 부모가 가진 값 < 오른쪽이 가진 값   
중복x   

검색, 정렬의 기준을 설정하려면 domain클래스에 아래와 같은 방식으로 메서드 Override   
```
@Override
	public int compareTo(Member member) {
		
		return (this.ID - member.ID);
		// 추가되는 객체의 상위 인터페이스로 Comparable추가
		// this.ID가 추가되는 객체의 ID, 뒤의 member.ID는 기존에 있던 객체의 ID
		// 오름차순. 양수 - 뒤로 , 음수 - 앞으로
		// -1을 곱하면 내림차순

		return this.name.compareTo(member.name);
		// String에는 compareTo가 있어서 가져다 쓰면 됨
		// -1을 곱하면 내림차순
	}

		@Override
		public int compare(Member member1, Member member2) {
			// 추가되는 객체의 상위 인터페이스로 Comparator
			// TreeSet에서 정렬방법 결정			
			// member1 - 들어가는 객체, member2 들어있던 객체
			return member1.ID - member2.ID;
		}
```
Comparable이나 Comparator 둘중 하나를 씀   
Comparable을 많이 쓰고 둘다 쓰는 경우는 거의 없다   

# Map
key-value pair 객체관리   
key는 중복x   
검색을 위한 자료구조   
key를 이용해서 값을 저장하거나 검색,삭제할때 편리   
hash방식으로 구현됨   
key가 되는 객체의 유일성 여부를 알기위해   
equals()와 hashCode()를 재정의   

HashMap클래스   
Map 인터페이스를 구현한 클래스중 가장 일반적으로 사용   
HashTable은 동기화를 제공   