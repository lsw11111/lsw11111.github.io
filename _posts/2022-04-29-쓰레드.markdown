---
# multilingual page pair id, this must pair with translations of this page. (This name must be unique)
lng_pair: id_Examples
title: "[자바]쓰레드"

# post specific
# if not specified, .name will be used from _data/owner.yml
author: Mr. Green's Workshop
# multiple category is not supported
category: 자바
# multiple tag entries are possible
tags: []
# thumbnail image for post
img: ":자바.png"
# disable comments on this page
#comments_disable: true

# publish date
date: 2022-04-29 11:09:06 +0900

# seo
# if not specified, date will be used.
#meta_modify_date: 2022-02-10 08:11:06 +0900
# check the meta_common_description in _data/lang/[language].yml
#meta_description: ""

# optional
# if you enabled image_viewer_posts you don't need to enable this. This is only if image_viewer_posts = false
#image_viewer_on: true
# if you enabled image_lazy_loader_posts you don't need to enable this. This is only if image_lazy_loader_posts = false
#image_lazy_loader_on: true
# exclude from on site search
#on_site_search_exclude: true
# exclude from search engines
#search_engine_exclude: true
# to disable this page, simply set published: false or delete this file
#published: false
---

<!-- outline-start -->

<!-- outline-end -->

# 프로세스와 쓰레드
프로세스: 실행중인 프로그램, 자원(메모리,CPU..)과 쓰레드로 구성   
쓰레드: 프로세스내에서 실제 작업을 수행   
모든 프로세스는 최소 하나의 쓰레드를 가짐   
<br/>
프로세스 - 공장   
쓰레드 - 일꾼   
싱글쓰레드 - 자원 + 하나의 쓰레드   
멀티쓰레드 - 자원 + 여러개의 쓰레드   
<br/>
하나의 프로세스를 생성하는것보다   
하나의 쓰레드를 생성하는것이 더 적은 비용이 든다   
<br/>
CGI방식, JavaServlet이 있었는데   
CGI는 프로세스를 늘리는 방식이어서 비효율적인데다   
90년대말 웹서버 수요가 늘게 됨으로써   
멀티쓰레드를 지원하는 Java쪽을 선호하게 됨   
<br/>
멀티쓰레드의 장단점   
장점   
시스템자원을 효율적으로 사용   
사용자에 대한 응답성이 향상   
작업이 분리되어 코드가 간결해짐   
<br/>
단점
동기화에 주의해야 한다   
교착상태(dead-lock)가 발생하지 않게 주의해야함   
각 쓰레드가 효율적으로 고르게 실행될수 있게 해야함(기아 주의)   
결론: 프로그래밍시 고려해야할 사항이 많음   

# 쓰레드 구현과 실행
1 - Thread클래스를 상속(extends Thread)   
2 - Runnable인터페이스를 구현(implements Runnable)   
2번 방식이 더 나음(클래스는 단일 상속)   
둘다 run() 추상메서드를 가지고 있음   
<br/>
Thread상속시
MyThread t1 = new MyThread(); 생성
t1.start(); 실행
<br/>
Runnable구현시
Runnable r = new MyThread2();
Thread t2 = new Thread(r);
--> Thread t2 = new Thread(new MyThread2());
t2.start();

# 멀티쓰레드 구현
```
public class ThreadEx_3 {

	public static void main(String[] args) {
		ThreadEx_3_Thread1 thread1 = new ThreadEx_3_Thread1();
		
		Runnable r = new ThreadEx_3_Thread2();
		Thread thread2 = new Thread(r);
		
		thread1.start();
		thread2.start();
		/* 멀티 쓰레드
	    start()로 호출하면 쓰레드가 실행가능 상태가 됨
		  바로 쓰레드가 실행되는건 아니고 어느게 먼저 실행될지도 모름
		  실행순서는 OS스케줄러가 결정
			start() 메서드가 다른 스택에서 run()을 실행시킴 
		*/

		// 아래는 단일 쓰레드 - 위 for문이 먼저 실행되고 아래 for문이 순차적으로 실행됨
//		for (int i = 0; i < 500; i++) {
//			System.out.print(0);			
//		}
//		
//		for (int i = 0; i < 500; i++) {
//			System.out.print(1);			
//		}
//		
	}

}

class ThreadEx_3_Thread1 extends Thread {
	public void run() { // 쓰레드가 수행할 작업을 구현하는 메서드

		for (int i = 0; i < 500; i++) {
			System.out.print(0);			
		}
	}
}

class ThreadEx_3_Thread2 implements Runnable {

	@Override
	public void run() {

		for (int i = 0; i < 500; i++) {
			System.out.print(1);
		}
	}

}
```
콘솔창을 보면 0과 1이 섞여서 찍힌다 - 각 쓰레드가 동시에 실행됨

# IO Blocking - 입출력시 작업중단
싱글쓰레드의 경우
```
public static void main(String[] args) {
		String input = JOptionPane.showInputDialog("아무값이나 입력하세요");
		System.out.println("입력하신 값은 " + input + "입니다");
		
		// 입력창이 떠있는 상태에선 아래의 for반복문까지 실행이 되질 않음 

		for (int i = 10; i > 0; i--) {
			System.out.println(i);
			try {
				Thread.sleep(1000); // 1초간 시간을 지연함
			} catch (Exception e) {
				System.out.println(e);
			}
		}
	}
```
멀티쓰레드의 경우
```
public class IOBlockingMultiEx_10 {

	public static void main(String[] args) {
		Runnable r = new IOBlockingMultiEx_10_Thread1();
		Thread thread1 = new Thread(r);
		thread1.start();
		
		String input = JOptionPane.showInputDialog("아무값이나 입력하세요");
		System.out.println("입력하신 값은 " + input + "입니다");
				
	} //main

}

class IOBlockingMultiEx_10_Thread1 implements Runnable{

	@Override
	public void run() {
		for (int i = 10; i > 0; i--) {
			System.out.println(i);
			try {
				Thread.sleep(1000); // 시간을 지연하는 메서드. 단위는 밀리초
			} catch (Exception e) {
				System.out.println(e);
			}
		}
	}
	
}
```
입력창이 뜨게 하는 main쓰레드와 아래 쓰레드가 동시에 실행되므로   
입력창이 떠있는 상태에서도 아래의 for문이 진행됨   

# 쓰레드의 우선순위
작업중요도에 따라 쓰레드의 우선순위를 다르게 하여   
특정쓰레드가 더 많은 작업시간을 갖게한다   
상대적 우선순위   
<br/>
void setPriority(int newPriority) 쓰레드의 우선순위를 지정한 값으로 변경   
int getPriority() 쓰레드의 우선순위   
<br/>
public static final int MAX_PRIORITY = 10   
public static final int MIN_PRIORITY = 1   
public static final int NORM_PRIORITY = 5   (디폴트)

실제로는 OS에서 맞추는것이고   
자바에서 정하는 우선순위는 희망사항으로 OS스케줄러에 전달   
1~10까지   

예시
```
public class PriorityEx_12 {

	public static void main(String[] args) {
		Runnable r1 = new PriorityEx_12_Thread1();
		Thread thread1 = new Thread(r1);
		Runnable r2 = new PriorityEx_12_Thread2();
		Thread thread2 = new Thread(r2);
		
//		thread1.setPriority(5); // 안써도 되는 기본값
		thread2.setPriority(9);
		// 우선순위를 높게 주긴했지만 반드시 이것을 따르는것은 아님(확률적)
		// 상대적인 값
		System.out.println("Priority of thread1(-): " + thread1.getPriority());
		System.out.println("Priority of thread2(-): " + thread2.getPriority());
		
		thread1.start();
		thread2.start();
	}

} // main

class PriorityEx_12_Thread1 implements Runnable{

	@Override
	public void run() {
		for (int i = 0; i < 300; i++) {
			System.out.print("-");
			for (int x = 0; x < 10000000; x++) {				
			} // 시간 지연용 for문
			
		}
	}
	
}
class PriorityEx_12_Thread2 implements Runnable{
	
	@Override
	public void run() {
		for (int i = 0; i < 300; i++) {
			System.out.print("|");
			for (int x = 0; x < 10000000; x++) {				
			}			
		}
	}
	
}
```

# 쓰레드 그룹
서로 관련된 쓰레드를 그룹으로 묶어서 다루기 위한것   
모든 쓰레드는 반드시 하나의 쓰레드 그룹에 포함되어 있어야 한다   
생성자의 매개변수로 넣음   
<br/>
지정하지 않고 생성한 쓰레드는 main쓰레드 그룹에 속한다   
자신을 생성한 쓰레드(부모 쓰레드)의 그룹과 우선순위를 상속받는다   
<br/>
메서드   
ThreadGroup getThreadGroup() 자신이 속한 쓰레드그룹을 반환   
// Thread의 메서드   
void uncaughtException(Thread t, Throwable e)   
처리되지 않은 예외에 의해 쓰레드 그룹의 쓰레드가 실행종료 되었을때   
JVM에 의해 자동으로 이 메서드가 호출됨   
// ThreadGroup의 메서드   

# 데몬 쓰레드
일반 쓰레드의 작업을 돕는 보조적 역할을 수행   
일반 쓰레드가 모두 종료되면 자동 종료   
가비지 컬렉터, 자동저장, 화면 자동갱신 등에 사용된다   
<br/>
무한루프와 조건문을 이용해 실행후 대기하다가 특정조건이 만족되면   
실행하고 다시 대기하도록 작성   
<br/>
예) 3초마다 if문 체크후 조건에 맞으면 자동저장   
```
while(true) {
		try{
			Thread.sleep(3000);	 			
		} catch(Exception e){
		}
		if(autosave) {
			autosave();
		}
	}
```
while문으로 무한반복하게 했지만   
일반 쓰레드가 종료되면 종료됨   
<br/>
boolean isDaemon() 데몬쓰레드인지 확인	 	
void setDaemon(boolean on)   
쓰레드를 데몬쓰레드로, 또는 사용자 쓰레드로 변경   
true로 지정하면 데몬쓰레드가 된다   
반드시 start()하기 전에 실행되어야 한다   
그렇지 않으면 예외 발생   

예시 : 일정 시간에 시작되어 3초마다 자동 저장이 반복되게끔 하는 데몬쓰레드   
```
public class DaemonEx_15 implements Runnable{
	static boolean autoSave = false;

	public static void main(String[] args) {
//		Runnable r = new DaemonEx_15();
//		Thread thread1 = new Thread(r);
		Thread autoSavethread = new Thread(new DaemonEx_15());
		
		autoSavethread.setDaemon(true);
		autoSavethread.start();
		
		for (int i = 1; i < 11; i++) {
			try {
				Thread.sleep(1000);
			} catch (InterruptedException e) {
					System.out.println(e);
			}
			System.out.println(i);
			if(i == 5) {
				autoSave = true;
			}
		}
		System.out.println("프로그램을 종료합니다");
	} // 실행중인 일반쓰레드가 하나도 없을때 데몬 쓰레드도 자동종료

	@Override
	public void run() {
		while(true) {
			try {
				Thread.sleep(3000);
			} catch (InterruptedException e) {
				System.out.println(e);
			}
			if(autoSave) autoSave();
		} // 3초마다 autoSave() 메서드 실행
	}

	private void autoSave() {
		System.out.println("자동 저장 되었습니다");
		
	}

}
```

# 쓰레드의 상태
NEW 쓰레드가 생성되고 아직 start()가 호출 안된 상태   
RUNNABLE 실행중 또는 실행가능한 상태   
BLOCKED 동기화 블럭에 의해 일시정지된 상태(LOCK이 풀릴때까지 대기)   
WAITING, TIMED_WAITING 쓰레드의 작업이 종료되진 않았지만   
실행불가능한 일시정지 상태. TIMED_WATING은 일시정지 시간이 지정된 경우를 의미   
TERMINATED 쓰레드의 작업이 종료된 상태   
<br/>
start() 대기열 생성후 실행(RUNNABLE)   
stop() 종료(TERMINATED)   
suspend() 일시정지   
sleep() ()밀리초동안 대기   
wait()    
join() 다른 쓰레드가 작업마칠때까지 대기   
I/O block 입출력 대기   
<br/>
time-out   
resume() 재개 <-> suspend()   
notify() 재개 <-> wait()   
interrupt() <-> sleep()   
-> 원래 sleep안의 매개변수만큼 자야되는데 그걸 강제로 깨우는것   
<br/>
쓰레드의 실행제어   
sleep(long millis) 지정된 시간(밀리초)만큼 쓰레드를 일시정지시킴   
자기 자신에게만 사용가능. 이걸 쓰려면 예외처리를 해줘야함   
InterruptedExcetion   
catch블록엔 아무것도 없어도 됨   
시간이 다 지나면 자동으로 실행대기상태가 됨   
join() 다른 쓰레드를 기다림   
join(long millis)    
interrupt() sleep()이나 join()으로 일시정지된 쓰레드를 실행대기상태로 만듦   
stop() 쓰레드 종료   
suspend() 일시정지   
resume() 재개   
yield() 주어진 실행시간을 다른 쓰레드에게 양보 - 실행대기상태가 됨   

# 동기화
멀티 쓰레드 프로세스에서는 다른 쓰레드의 작업에 영향을 미칠수 있다   
진행중인 작업이 다른 쓰레드에게 간섭받지 않게 하려면   
동기화 작업이 필요   
<br/>
동기화하려면 간섭받지 않아야하는 문장들을 '임계 영역'으로 설정   
임계영역은 락을 얻은 단 하나의 쓰레드만 출입가능(1객체에 락1개)   
하나의 쓰레드만 쓰기때문에 임계영역은 최소화 해야됨   
멤버변수는 private으로 해야 의미가 있다   
<br/>
synchronized(키워드)를 이용한 동기화   
임계영역 설정하는 방법 2가지   
1. 메서드 전체를 임계영역으로 지정   
public synchronized void calcSum() {}   
 <br/>
2. 특정 영역을 임계영역으로 지정   
synchronized(객체의 참조변수){}   
<br/>
작업이 끝날때까지 다른 쓰레드는 1.의 메서드를 사용못하거나   
2.의 영역내에 있는 작업을 수행하지 못함   

```
public class Wait_25 {

	public static void main(String[] args) {
		/*
		 wait() 기다림
		 notify() 알려줌
		 동기화 효율을 높이기 위해 사용
		 */
	}

}
class Account2 {
	int balance = 1000;
	
	synchronized void withdraw(int money) {
		while(balance < money) {
			try {
				wait(); // 잔액이 출금액보다 적으면 락을 풀고 기다림
			} catch (InterruptedException e) {}
		}
		balance -= money;
	}
	
	synchronized void deposit(int money) {
		balance += money;
		notify(); // 대기중인 쓰레드중 하나에게 알림
	}
}
/*
 wait(); 에 걸린 쓰레드는 락을 풀고 waitingPool에서 대기
 notify();는 하나만 깨움
 notifyAll();은 waitingPool에서 대기중인 모든 쓰레드를 깨움
 다 깨우지만 하나의 쓰레드만 사용
 */
```