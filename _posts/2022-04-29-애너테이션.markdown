---
# multilingual page pair id, this must pair with translations of this page. (This name must be unique)
lng_pair: id_Examples
title: "[자바]애너테이션"

# post specific
# if not specified, .name will be used from _data/owner.yml
author: Mr. Green's Workshop
# multiple category is not supported
category: 자바
# multiple tag entries are possible
tags: []
# thumbnail image for post
img: ":자바.png"
# disable comments on this page
#comments_disable: true

# publish date
date: 2022-04-29 10:35:06 +0900

# seo
# if not specified, date will be used.
#meta_modify_date: 2022-02-10 08:11:06 +0900
# check the meta_common_description in _data/lang/[language].yml
#meta_description: ""

# optional
# if you enabled image_viewer_posts you don't need to enable this. This is only if image_viewer_posts = false
#image_viewer_on: true
# if you enabled image_lazy_loader_posts you don't need to enable this. This is only if image_lazy_loader_posts = false
#image_lazy_loader_on: true
# exclude from on site search
#on_site_search_exclude: true
# exclude from search engines
#search_engine_exclude: true
# to disable this page, simply set published: false or delete this file
#published: false
---

<!-- outline-start -->

<!-- outline-end -->

# 정의
주석처럼 프로그래밍 언어에 영향을미치지 않으며
유용한 정보를 제공
JUnit이라는 단위테스트 프로그램을 위한것 - 정보제공
@를 쓰고 적음
예를들면 @Override
@Test 테스트 대상임을 테스트 프로그램에 알림
<br/>
```
/**
	 이런 형태는 javadoc.exe주석 
	 프로그램을 위한 주석. 소스코드에 대한 설명
	 blah blah~
	 @author 작성자
	 @since 1.5 버전
	 */
```

# 애너테이션 타입 정의
```
@interface 애너테이션 이름 {
		 타입(int등) 메서드이름(); // 애너테이션 요소를 선언

}
추상메서드로 선언
클래스 등에 애너테이션을 적용할때 지정

애너테이션의 요소
적용시 값을 지정하지 않으면 사용되는 기본값 지정가능 -null제외
@interface TestInfo {
		 int count() default 1; //기본값 1로 지정
}
@TestInfo // count의 기본값인 1이 적용됨
public class NewClass { ... }

요소가 하나이고 이름이 value일때 요소이름은 생략가능
@interface TestInfo{
		 String value();
}
@TestInfo("passed") //@TestInfo(value="passed")와 동일
class NewClass{ ... }

요소의 타입이 배열일 경우 괄호{}를 사용
@interface TestInfo {
		 String[] testTools();
}
@TestInfo(testTools = {"JUnit", "AutoTest"}) 둘이상일때 {}에 넣어줌
@TestInfo(testTools = "JUnit") 배열의 요소가 하나일땐 없어도 됨
@TestInfo(testTools = {}) 값이 없어도 {}가 반드시 필요
```
모든 애너테이션의 조상 - java.lang.annotation.Annotation   
Annotation은 모든 애너테이션의 조상이지만 상속은 불가(extends 안됨)   
Annotation은 인터페이스   
추상메서드들을 가지고 있지만 재정의하지 않아도 사용가능(컴파일러)   
<br/>
마커 애너테이션   
요소가 하나도 정의되지 않은 애너테이션   
@Override, @Test, @Deprecated   
정의되는 요소가 하나도 없다   
쓸곳에 넣기만 하면 된다   
<br/>
애너테이션 요소의 규칙   
타입은 기본형, String, enum, 애너테이션, Class만 허용   
추상메서드()안에 매개변수 x   
예외선언 불가   
타입매개변수<T> 쓸수 없다   

# 주로 쓰이는 애너테이션
```
@Override - javac.exe
오버라이딩을 제대로 했는지 컴파일러가 체크하게 함
오버라이딩할 메서드 위에 @Override를 씀

@Deprecated
앞으로 사용하지 않을것을 권장하는 필드나 메서드에 붙임
예/ Date클래스의 getDate()

@Deprecated
public int getDate() {
		 return normalize().getDayOfMonth();
} 
하위호환을 중시하기 때문에 없애지는 않고 냅둠
컴파일하면 메시지가 뜨는데 에러는 아니고 경고

@FunctionalInterface
함수형 인터페이스
컴파일러가 제대로 작성했는지를 체크
하나의 추상메서드만 가져야하고 람다식을 쓰기 위한 인터페이스

@SuppressWarnings()
컴파일러의 경고메시지(노란색)가 나타나지 않게함
()안에 "deprecation", "unchecked", "varargs"
```

# 메타 애너테이션
애너테이션을 위한 애너테이션   
```
@Target
적용대상 지정에 사용
예)
@Target(TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR,LOCAL_VARIBLE)
@Retention(RetentionPolicy.SOURCE)
public @interface SuppressWarnings{
	 String[] value();
} // @Retention은 클래스, 인터페이스, 멤버변수(필드), 메서드, 매개변수 등에 쓸수있음

@Documented
javadoc(/별표2개 별표1개/)으로 작성한 문서를 포함시키려면 붙인다
쓸일이 별로 없다
 
@Inherited
애너테이션을 자손클래스에 상속할때

@Retention
유지되는 기간 지정
SOURCE 소스파일(*.java)에만 존재
CLASS 클래스 파일에 존재. 실행시 사용불가. 기본값. 잘 안씀
RUNTIME 클래스 파일 존재. 실행시에 사용가능

@Repeatable
반복해서 붙일수있는 애너테이션을 정의할때
```