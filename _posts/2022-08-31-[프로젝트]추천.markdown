---
# multilingual page pair id, this must pair with translations of this page. (This name must be unique)
lng_pair: id_Examples
title: "[프로젝트]추천/비추"

# post specific
# if not specified, .name will be used from _data/owner.yml
author: Mr. Green's Workshop
# multiple category is not supported
category: 프로젝트
# multiple tag entries are possible
tags: []
# thumbnail image for post
img: ":Spring_Framework_logo.png"
# disable comments on this page
#comments_disable: true

# publish date
date: 2022-08-30 15:00:06 +0900

# seo
# if not specified, date will be used.
#meta_modify_date: 2022-02-10 08:11:06 +0900
# check the meta_common_description in _data/lang/[language].yml
#meta_description: ""

# optional
# if you enabled image_viewer_posts you don't need to enable this. This is only if image_viewer_posts = false
#image_viewer_on: true
# if you enabled image_lazy_loader_posts you don't need to enable this. This is only if image_lazy_loader_posts = false
#image_lazy_loader_on: true
# exclude from on site search
#on_site_search_exclude: true
# exclude from search engines
#search_engine_exclude: true
# to disable this page, simply set published: false or delete this file
#published: false
---

<!-- outline-start -->

<!-- outline-end -->

# 추천/비추천 구현
추천/비추천 버튼을 누르면 실시간으로 DB가 업데이트됨과 동시에
웹 브라우저에서도 그 태그부분만 업데이트 되게끔 함


컨트롤러 부분
```
@PostMapping("/api/click-likes")
@RequestBody
    public void clickLikes(int articleNo) {
        articleService.clickLikes(articleNo);
    }

@PostMapping("/api/click-dislikes")
@RequestBody
    public void clickDislikes(int articleNo) {
        articleService.clickDislikes(articleNo);
    }
```
MyBatis 쿼리
```
<update id="clickLikes" parameterType="int">
    UPDATE ARTICLE
    SET LIKES = LIKES + 1
    WHERE ARTICLE_NO = #{articleNo}
</update>

<update id="clickDislikes" parameterType="int">
    UPDATE ARTICLE
    SET DISLIKES = DISLIKES + 1
    WHERE ARTICLE_NO = #{articleNo}
</update>
```
프로젝트의 방침에 따라 @RequestBody를 쓸수도 있고 @RestController로 따로 뺄수 있음

# 추천/비추천 구현
추천/비추천 버튼을 누르면 실시간으로 DB가 업데이트됨과 동시에
웹 브라우저에서도 그 태그부분만 새로고침 되게끔 함   

컨트롤러 부분
```
@PostMapping("/click-likes")
@RequestBody
    public void clickLikes(int articleNo) {
        articleService.clickLikes(articleNo);
    }

@PostMapping("/click-dislikes")
@RequestBody
    public void clickDislikes(int articleNo) {
        articleService.clickDislikes(articleNo);
    }
```
@RequestBody를 썼으나 @RestController로 따로 뺄수 있음   

자바스크립트 부분
```
function click_likes() {
  $.ajax({
    url: "/api/click-likes",
    type: "POST",
    data: { "articleNo" : $("#articleNo").val() },
    dataType: "JSON",
    success: function (data) {
      console.log('추천 성공')
    },
    complete: function() {
      $('#likes-dislikes').load(location.href+' #likes-dislikes')
    }
  })
}

function click_dislikes() {
  $.ajax({
    url: "/api/click-dislikes",
    type: "POST",
    data: { "articleNo" : $("#articleNo").val() },
    dataType: "JSON",
    success: function (data) {
      console.log('비추 성공')
    },
    complete: function() {
      $('#likes-dislikes').load(location.href+' #likes-dislikes')
    }
  })
}

function likes_live_reload() {
  $("#likes-dislikes").load(location.href+ ' #likes-dislikes')
}

setTimeout(likes_live_reload(), 1000)
```





